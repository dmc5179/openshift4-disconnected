---
# tasks file for vsphere_csi_driver

# TODO: Need to mirror the images for this CSI driver
#       As well as create the Image Content Source Policy Mapping

- name: Apply ICSP Mapping
  include_tasks: icsp.yml
  tags:
    - never
    - icsp

- name: Create vsphere namespace for CSI Drivers
  delegate_to: localhost
  k8s:
    name: vsphere
    api_version: v1
    kind: Namespace
    state: present
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'

- name: Taint Worker Nodes
  delegate_to: localhost
  shell:
    cmd: 'oc adm taint node --overwrite=true {{item}}.{{ocp_base_domain}} node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule'
  with_items:
    - 'worker0.caas'
    - 'worker1.caas'
    - 'worker2.caas'

- name: Create cloud control config map
  delegate_to: localhost
  k8s:
    state: present
    name: cloud-config
    namespace: '{{ vsphere_namespace }}'
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere_configmap.yaml.j2') }}"

- name: Create CPI Global Secret
  delegate_to: localhost
  k8s:
    state: present
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/cpi-global-secret.yaml.j2') }}"

- name: Create cloud control manager roles
  delegate_to: localhost
  k8s:
    state: present
    wait: true
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/cloud-controller-manager-roles.yaml.j2') }}"

- name: Create cloud control manager role bindings
  delegate_to: localhost
  k8s:
    state: present
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    namespace: '{{ vsphere_namespace }}'
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/cloud-controller-manager-role-bindings.yaml.j2') }}"

#- name: Create role bindings for non kube-system namespace
#  delegate_to: localhost
#  k8s:
#    state: present
#    name: vsphere-cpi-kubesystem
#    namespace: kube-system
#    wait: true
#    kubeconfig: "{{ kubeconfig  }}"
#    validate_certs: '{{ ssl_enabled }}'
#    definition: "{{ lookup('template', 'templates/vsphere_cpi_kubesystem_rolebinding.yaml.j2') }}"

- name: RoleBinding is needed for the cloud-controller-manager service account.
  shell:
    cmd: oc create rolebinding -n kube-system vsphere-cpi-kubesystem --role=extension-apiserver-authentication-reader --serviceaccount=vsphere:cloud-controller-manager
  ignore_errors: true

# This was to try and break things up. Doesn't work yet
#- name: Create Cloud Controlelr Manager Service Account
#  delegate_to: localhost
#  k8s:
#    state: present
#    wait: true
#    namespace: '{{ vsphere_namespace }}'
#    kubeconfig: "{{ kubeconfig  }}"
#    validate_certs: '{{ ssl_enabled }}'
#    definition: "{{ lookup('template', 'templates/service_account.yaml.j2') }}"

- name: Set SCC Policy
  delegate_to: localhost
  shell:
    cmd: oc adm policy add-scc-to-user privileged -z cloud-controller-manager

# This was to try and break things up. Doesn't work yet
#- name: Create Cloud Controller Service
#  delegate_to: localhost
#  k8s:
#    state: present
#    namespace: '{{ vsphere_namespace }}'
#    wait: true
#    kubeconfig: "{{ kubeconfig  }}"
#    validate_certs: '{{ ssl_enabled }}'
#    definition: "{{ lookup('template', 'templates/vsphere_cloud_controller_manager_service.yaml.j2') }}"

- name: Create Cloud Controller Daemonset
  delegate_to: localhost
  k8s:
    state: present
    wait: true
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere_cloud_controller_manager_daemonset.yaml.j2') }}"

- name: Remove existing temp file
  file:
    path: /tmp/csi-vsphere.conf
    state: absent

- name: Set cluster-id in csi-vsphere.conf
  ini_file:
    path: /tmp/csi-vsphere.conf
    section: Global
    option: cluster-id
    value: "\"demo-cluster-id\""
    mode: '0600'

- name: Set insecure-flag in csi-vsphere.conf
  ini_file:
    path: /tmp/csi-vsphere.conf
    section: "VirtualCenter \"{{ vcenter_hostname }}\""
    option: insecure-flag
    value: "\"true\""
    mode: '0600'

- name: Set user in csi-vsphere.conf
  ini_file:
    path: /tmp/csi-vsphere.conf
    section: "VirtualCenter \"{{ vcenter_hostname }}\""
    option: user
    value: "\"{{ vcenter_username }}\""
    mode: '0600'

- name: Set password in csi-vsphere.conf
  ini_file:
    path: /tmp/csi-vsphere.conf
    section: "VirtualCenter \"{{ vcenter_hostname }}\""
    option: password
    value: "\"{{ vcenter_password }}\""
    mode: '0600'

- name: Set port in csi-vsphere.conf
  ini_file:
    path: /tmp/csi-vsphere.conf
    section: "VirtualCenter \"{{ vcenter_hostname }}\""
    option: port
    value: "\"{{ vcenter_port }}\""
    mode: '0600'

- name: Set datacenters in csi-vsphere.conf
  ini_file:
    path: /tmp/csi-vsphere.conf
    section: "VirtualCenter \"{{ vcenter_hostname }}\""
    option: datacenters
    value: "\"{{ datacenter_name }}\""
    mode: '0600'

#- name: Slurp the csi-vsphere.conf
#  slurp:
#    src: /tmp/csi-vsphere.conf
#  register: csi_vsphere_conf

#- name: Create CSI vSphere Secret
#  delegate_to: localhost
#  k8s:
#    state: present
#    wait: true
#    name: vsphere-config-secret
#    namespace: '{{ vsphere_namespace }}'
#    kubeconfig: "{{ kubeconfig  }}"
#    validate_certs: '{{ ssl_enabled }}'
#    definition: /tmp/csi-vsphere.conf
#    definition: "{{ lookup('template', 'templates/csi-vsphere.conf.j2') }}"

- name: Create CSI vCenter Secret
  shell:
    cmd: oc create secret generic vsphere-config-secret --from-file=/tmp/csi-vsphere.conf --namespace={{ vsphere_namespace }}

- name: Cleanup temp file
  file:
    path: /tmp/csi-vsphere.conf
    state: absent

- name: Create RBAC for CSI Drivers
  delegate_to: localhost
  k8s:
    state: present
    wait: true
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere-csi-controller-rbac.yaml.j2') }}"

- name: RoleBinding is needed for the vsphere-csi-controller service account
  delegate_to: localhost
  shell:
    cmd: oc create rolebinding -n kube-system vsphere-csi-kubesystem --role=extension-apiserver-authentication-reader --serviceaccount=vsphere:vsphere-csi-controller
  ignore_errors: true

- name: RoleBinding is needed for the vsphere-csi-controller service account
  delegate_to: localhost
  shell:
    cmd: oc adm policy add-scc-to-user privileged -z vsphere-csi-controller

- name: Create CSI Controller Stateful Set
  delegate_to: localhost
  k8s:
    state: present
    wait: true
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere-csi-controller-ss.yaml.j2') }}"

- name: Create CSI Node Daemon Set
  delegate_to: localhost
  k8s:
    state: present
    wait: true
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere-csi-node-ds.yaml.j2') }}"
