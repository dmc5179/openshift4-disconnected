---
# tasks file for vsphere_csi_driver

# TODO: Need to mirror the images for this CSI driver
#       As well as create the Image Content Source Policy Mapping

- name: Apply ICSP Mapping
  include_tasks: icsp.yml
  tags:
    - never
    - icsp

- name: Create vsphere namespace for CSI Drivers
  k8s:
    name: vsphere
    api_version: v1
    kind: Namespace
    state: present
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'

- name: Taint Worker Nodes
  shell:
    cmd: 'oc adm taint node --overwrite=true {{item}}.{{ocp_base_domain}} node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule'
  with_items:
    - worker0
    - worker1
    - worker2

- name: Create cloud control config map
  k8s:
    state: present
    name: cloud-config
    namespace: '{{ vsphere_namespace }}'
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere_configmap.yaml.j2') }}"

- name: Create CPI Global Secret
  k8s:
    state: present
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/cpi-global-secret.yaml.j2') }}"

- name: Create cloud control manager roles
  k8s:
    state: present
    wait: true
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/cloud-controller-manager-roles.yaml.j2') }}"

- name: Create cloud control manager role bindings
  k8s:
    state: present
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    namespace: '{{ vsphere_namespace }}'
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/cloud-controller-manager-role-bindings.yaml.j2') }}"

- name: Create role bindings for non kube-system namespace
  k8s:
    state: present
    name: vsphere-cpi-kubesystem
    namespace: kube-system
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere_cpi_kubesystem_rolebinding.yaml.j2') }}"

# TODO oc create rolebinding -n kube-system vsphere-csi-kubesystem --role=extension-apiserver-authentication-reader --serviceaccount=vsphere:vsphere-csi-controller

- name: Create Cloud Controlelr Manager Service Account
  k8s:
    state: present
    wait: true
#    name:
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/service_account.yaml.j2') }}"

- name: Set SCC Policy
  shell:
    cmd: oc adm policy add-scc-to-user privileged -z cloud-controller-manager

- name: Create Cloud Controller Service
  k8s:
    state: present
#    name:
    namespace: '{{ vsphere_namespace }}'
    wait: true
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere_cloud_controller_manager_service.yaml.j2') }}"

- name: Create Cloud Controller Daemonset
  k8s:
    state: present
    wait: true
#    name:
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere_cloud_controller_manager_daemonset.yaml.j2') }}"

- name: Create vsphere-csi-controller Service Account
  k8s:
    state: present
    wait: true
#    name:
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere-csi-controller-rbac.yaml.j2') }}"

- name: Create CSI Controller Stateful Set
  k8s:
    state: present
    wait: true
#    name:
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere-csi-controller-ss.yaml.j2') }}"

- name: Create CSI Node Daemon Set
  k8s:
    state: present
    wait: true
#    name:
    namespace: '{{ vsphere_namespace }}'
    kubeconfig: "{{ kubeconfig  }}"
    validate_certs: '{{ ssl_enabled }}'
    definition: "{{ lookup('template', 'templates/vsphere-csi-node-ds.yaml.j2') }}"
